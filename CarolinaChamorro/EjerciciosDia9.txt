1 - Junta estos tres Arrays ["Oscar", ...], [9897667, ...], [false, ...] de tal forma que construyan un único Array anidado [["Oscar", 9897667, false], [etc...]]

		var arreglo1 = ["Oscar", "María", "Alba", "Sandra"],
		arreglo2 = [9897667, 6656596, 65656236, 6262623],
		arreglo3 = [false, false, false, true];
	
	var union = [];
	
	for (var i = 0; i <= arreglo1.length; i++){
		var resumen = [arreglo1[i], arreglo2[i], arreglo3[i]];
		anidacion.push(resumen);
	}
	
	console.log("La union es %O", union);
	
2 - Crea un Array con 100 numeros enteros al azar. Después crea un array para almacenar los números pares y otro array para los impares. Opcional: Ordena los números pares e impares en sus respectivos arrays
	
		var arrayPares = [], arrayImpares = [];
	
	for (var i = 0; i<100; i++){
		var random = Math.floor((Math.random() * 6) + 1)
		if(random % 2 !== 0){
			arrayImpares.push(random);
		} else {
			arrayPares.push(random);
		}
	}
	
	// Opcional
	arrayPares = arrayPares.sort();
	arrayImpares = arrayImpares.sort();
	
3 - Vamos a gestionar la lista de asistentes de un evento.

Características:

Cada asistente recibirá el identificador de su posición en el Array.
El identificador no puede cambiar una vez reservado el asiento.
Los asistentes pueden darse de baja, y el asiento que ocupaban queda libre.
Los nuevos asistentes seran asigandos primero a asientos desocupados.
Opcional:

Verifica antes de asignar un asistente que no se registro previamente.
	
	
//CLIENTES LISTA
var list = ["Maria", underfined, "Sara"];

/*
Función añadir
*/

funcion add(name){
	
	if(name && typeof(name) === "string" &&  list.indexOf(name) === -1{
		var emptyPosition = list.indexOf(undefinded);
		emptyPosition !== -1 ? list.push(name) : list[emptyPosition] = name;
		retutn true
	} else {
		
		return false;
		//console.log(name, "- is in the list!");
	}


}

/*
Función para quitar
*/

function remove(name) {
	var namePosition =  list.indexOf(name);
	if(emptyPosition === -1 {
		console.log(name,"- not found!");
	} else {
		list["namePosition"] = undefined;
	
	}
}


/* -------TEST--------*/

//Scene Validation
console.assert(list.length === 3, "List - Wrong elemnt is Array");
console.assert(list.length[1] === undefined, "List - no undefined element");
console.assert(list.length[0] === "Bob" , "List -  Bob is first");

//TEST add()
//
console.assert(add() === false, "add() - Wrong length")
console.assert(list.length === 3, "add() - Wrong length");

//
console.assert(add("me") === true, "add('me') - Wrong return")
console.assert(list.length === 3, "add('me') - Wrong length");
console.assert(list.length[1] === "me", "List - Wrong undefined element");

//
add("me2");
console.assert(list.length === 4, "add('me2') - Wrong elemnt is Array");
console.assert(list.length[3] === "me2", "add ('me2') - List - Wrong new element");

//
add("Bob")
console.assert(list.length === 4, "add('Bob') - Wrong length");

//TEST remove()
remove("me2)
console.assert(list.length === 5, "remove('me2') - Wrong length");
console.assert(list.length[3] === undefinded, "remove('me2') - Wrong replacement");


